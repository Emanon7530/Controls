Imports Microsoft.EntityFrameworkCore
Imports LibXComponents.Entities ' Assuming entities are in LibXComponents.Entities namespace
Imports Microsoft.Extensions.Configuration ' Added
Imports System.IO ' Added

Public Class AppDbContext
    Inherits DbContext

    Public Property Users As DbSet(Of User)
    Public Property GenericItems As DbSet(Of GenericItem)

    Public Sub New()
        ' Default constructor needed for some design-time tools, though less common with DI.
    End Sub

    Public Sub New(options As DbContextOptions(Of AppDbContext))
        MyBase.New(options)
    End Sub

    Private Shared ReadOnly Property Configuration As IConfiguration
        Get
            ' This provides a simple way to load configuration.
            ' In a more advanced setup, IConfiguration would be injected.
            Return New ConfigurationBuilder() _
                .SetBasePath(Directory.GetCurrentDirectory()) _
                .AddJsonFile("appsettings.json", optional:=False, reloadOnChange:=True) _
                .Build()
        End Get
    End Property

    Protected Overrides Sub OnConfiguring(optionsBuilder As DbContextOptionsBuilder)
        If Not optionsBuilder.IsConfigured Then
            Dim connectionString As String = Configuration.GetConnectionString("DefaultConnection")
            If String.IsNullOrEmpty(connectionString) Then
                Throw New InvalidOperationException("Connection string 'DefaultConnection' not found in appsettings.json.")
            End If
            optionsBuilder.UseSqlServer(connectionString)
        End If
        MyBase.OnConfiguring(optionsBuilder)
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As ModelBuilder)
        MyBase.OnModelCreating(modelBuilder)

        ' Configure User entity
        modelBuilder.Entity(Of User)(Sub(entity)
                                         ' Assuming UserID is the primary key.
                                         ' Adjust if UserID is generated by the database, e.g. .ValueGeneratedOnAdd()
                                         entity.HasKey(Function(e) e.UserID)

                                         entity.Property(Function(e) e.UserName).IsRequired().HasMaxLength(100)
                                         entity.HasIndex(Function(e) e.UserName).IsUnique() ' Ensure UserName is unique

                                         entity.Property(Function(e) e.PasswordHash).IsRequired().HasMaxLength(256) ' PasswordHash should be required

                                         ' Example: If SucursalCode is a foreign key to a theoretical 'Sucursales' table
                                         ' entity.HasOne(Function(u) u.Sucursal)
                                         '       .WithMany(Function(s) s.Users)
                                         '       .HasForeignKey(Function(u) u.SucursalCode)

                                         ' Add other configurations for User entity as needed based on schema.
                                         ' For example, setting column names if they differ from property names:
                                         ' entity.Property(Function(e) e.UserID).HasColumnName("user_id")
                                     End Sub)

        ' Configure GenericItem entity
        modelBuilder.Entity(Of GenericItem)(Sub(entity)
                                                entity.HasKey(Function(e) e.Id)
                                                entity.Property(Function(e) e.Id).ValueGeneratedOnAdd() ' Assuming auto-incrementing PK

                                                entity.Property(Function(e) e.Name).HasMaxLength(200)
                                                entity.Property(Function(e) e.Description).HasMaxLength(1000) ' Example length

                                                 ' Example: Self-referencing relationship for Parent/Child GenericItems
                                                 entity.HasOne(Function(d) d.Parent) _
                                                       .WithMany(Function(p) p.Children) _
                                                       .HasForeignKey(Function(d) d.ParentId) _
                                                       .OnDelete(DeleteBehavior.ClientSetNull) ' Or DeleteBehavior.Restrict if preferred

                                                ' Add other configurations for GenericItem entity as needed.
                                            End Sub)

        ' Further entity configurations can be added here as more tables are identified and mapped.
        ' Relationships (one-to-one, one-to-many, many-to-many) would also be defined here
        ' using Fluent API if not covered by conventions or data annotations on entity properties.

        ' Note on handling LibXDbSourceTable.Source:
        ' If LibXDbSourceTable.Source properties contained complex custom SQL SELECT statements
        ' that do not map directly to a single table or a simple view, these would need to be
        ' addressed in an EF Core context by:
        ' 1. Mapping entities to database Views that encapsulate the query logic.
        '    Example: modelBuilder.Entity(Of MyCustomViewResult)().ToView("MyCustomViewName")
        ' 2. Using DbSet(Of T).FromSqlRaw("SELECT ...") or DbSet(Of T).ToSqlQuery("SELECT ...") (EF Core 7+)
        '    for specific queries when the result type matches an entity or a keyless entity type.
        '    This is often used for ad-hoc queries or when mapping to stored procedure results.
        ' 3. Refactoring the original need for such custom queries to leverage EF Core's LINQ
        '    capabilities over DbSet properties, which can often express complex data retrieval
        '    and projection logic in a type-safe manner, translatable to efficient SQL by EF Core.
        ' 4. For raw SQL updates not fitting the entity change tracking model, context.Database.ExecuteSqlRawAsync()
        '    can be used (as already demonstrated in EfDataHelper for some operations).
    End Sub
End Class
